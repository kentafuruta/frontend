/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$sprite-icon-1-name: 'sprite-icon-1';
$sprite-icon-1-x: 213px;
$sprite-icon-1-y: 0px;
$sprite-icon-1-offset-x: -213px;
$sprite-icon-1-offset-y: 0px;
$sprite-icon-1-width: 208px;
$sprite-icon-1-height: 209px;
$sprite-icon-1-total-width: 421px;
$sprite-icon-1-total-height: 421px;
$sprite-icon-1-image: '../img/sprite_icon.png';
$sprite-icon-1: (213px, 0px, -213px, 0px, 208px, 209px, 421px, 421px, '../img/sprite_icon.png', 'sprite-icon-1', );
$sprite-icon-2-name: 'sprite-icon-2';
$sprite-icon-2-x: 0px;
$sprite-icon-2-y: 213px;
$sprite-icon-2-offset-x: 0px;
$sprite-icon-2-offset-y: -213px;
$sprite-icon-2-width: 209px;
$sprite-icon-2-height: 208px;
$sprite-icon-2-total-width: 421px;
$sprite-icon-2-total-height: 421px;
$sprite-icon-2-image: '../img/sprite_icon.png';
$sprite-icon-2: (0px, 213px, 0px, -213px, 209px, 208px, 421px, 421px, '../img/sprite_icon.png', 'sprite-icon-2', );
$sprite-icon-3-name: 'sprite-icon-3';
$sprite-icon-3-x: 0px;
$sprite-icon-3-y: 0px;
$sprite-icon-3-offset-x: 0px;
$sprite-icon-3-offset-y: 0px;
$sprite-icon-3-width: 209px;
$sprite-icon-3-height: 209px;
$sprite-icon-3-total-width: 421px;
$sprite-icon-3-total-height: 421px;
$sprite-icon-3-image: '../img/sprite_icon.png';
$sprite-icon-3: (0px, 0px, 0px, 0px, 209px, 209px, 421px, 421px, '../img/sprite_icon.png', 'sprite-icon-3', );
$sprite-icon-4-name: 'sprite-icon-4';
$sprite-icon-4-x: 213px;
$sprite-icon-4-y: 213px;
$sprite-icon-4-offset-x: -213px;
$sprite-icon-4-offset-y: -213px;
$sprite-icon-4-width: 61px;
$sprite-icon-4-height: 61px;
$sprite-icon-4-total-width: 421px;
$sprite-icon-4-total-height: 421px;
$sprite-icon-4-image: '../img/sprite_icon.png';
$sprite-icon-4: (213px, 213px, -213px, -213px, 61px, 61px, 421px, 421px, '../img/sprite_icon.png', 'sprite-icon-4', );
$icon-width: 421px;
$icon-height: 421px;
$icon-image: '../img/sprite_icon.png';
$icon-sprites: ($sprite-icon-1, $sprite-icon-2, $sprite-icon-3, $sprite-icon-4, );
$icon: (421px, 421px, '../img/sprite_icon.png', $icon-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
